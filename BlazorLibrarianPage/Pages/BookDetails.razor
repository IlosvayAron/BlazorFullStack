@page "/book/{id:int}"
@using BlazorFullStack.Contract
@using BlazorLibrarianPage.Services
@inject IBookService BookService
@inject IRentalService RentalService
@inject NavigationManager NavigationManager

<PageTitle>BookDetails</PageTitle>

@if (Book == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <h3>@Book.Title's details</h3>
    <table class="table table-hover table-border">
        <thead>
            <tr>
                <th>Title</th>
                <th>Author</th>
                <th>Publisher</th>
                <th>Inventory number</th>
                <th>Year of publishing</th>
            </tr>
        </thead>
        <tbody>
            <tr>
                <td>@Book.Title</td>
                <td>@Book.Author</td>
                <td>@Book.Publisher</td>
                <td>@Book.InventoryNumber</td>
                <td>@Book.PublishYear</td>
            </tr>
        </tbody>
    </table>

    <h4>Rental Details</h4>
    @if (Rental == null)
    {
        <EditForm EditContext="editContext" OnValidSubmit="@SubmitRentalDetails">
            <DataAnnotationsValidator />
            <div class="form-group">
                <label for="readingNumber">Reading Number:</label>
                <InputNumber class="form-control" id="readingNumber" @bind-Value="ReadingNumber" />
            </div>
            <div class="form-group">
                <label for="rentalTime">Rental Time:</label>
                <InputDate class="form-control" id="rentalTime" @bind-Value="RentalTime" />
            </div>
            <div class="form-group">
                <label for="returnDeadline">Return Deadline:</label>
                <InputDate class="form-control" id="returnDeadline" @bind-Value="ReturnDeadline" />
            </div>
            <button type="submit" class="btn btn-primary">Submit</button>
        </EditForm>
    }
    else
    {
        <table class="table table-hover table-border">
            <thead>
                <tr>
                    <th>ReadingNumber</th>
                    <th>RentalTime</th>
                    <th>ReturnDeadline</th>
                    <th></th>
                </tr>
            </thead>
            <tbody>
                <tr>
                    <td>@Rental.ReadingNumber</td>
                    <td>@Rental.RentalTime.ToShortDateString()</td>
                    <td>@Rental.ReturnDeadline.ToShortDateString()</td>
                    <td>
                        <button type="button" class="btn btn-primary" @onclick="DeleteRentalDetails">Delete</button>
                    </td>
                </tr>
            </tbody>
        </table>
    }
}

@code {

    [Parameter]
    public int Id { get; set; }

    private Book? Book { get; set; }
    private Rental? Rental { get; set; }
    private EditContext editContext;

    private int ReadingNumber { get; set; }
    private DateTime RentalTime { get; set; }
    private DateTime ReturnDeadline { get; set; }
    

    protected override async Task OnInitializedAsync()
    {
        Book = await BookService.GetBookByIdAsync(Id);
        Rental = await RentalService.GetRentalByIdAsync(Id);
        editContext = new EditContext(Rental ?? new Rental());
    }

    private async Task SubmitRentalDetails()
    {
        Rental rental = new Rental
        {
            ReadingNumber = ReadingNumber,
            RentalTime = RentalTime,
            ReturnDeadline = ReturnDeadline
        };

        await RentalService.AddRentalAsync(rental);
        NavigationManager.NavigateTo("booklist/");
    }

    private async Task DeleteRentalDetails()
    {
        await RentalService.DeleteRentalAsync(Rental.Id);
        NavigationManager.NavigateTo("booklist/");
    }
}
